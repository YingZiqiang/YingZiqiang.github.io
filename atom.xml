<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只NLP程序猿的点滴</title>
  
  <subtitle>生命太短暂，不要去做一些根本没有人想要的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-19T16:02:53.376Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yingzq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么需要Git</title>
    <link href="http://yoursite.com/2019/09/18/why-we-need-git/"/>
    <id>http://yoursite.com/2019/09/18/why-we-need-git/</id>
    <published>2019-09-18T14:19:30.000Z</published>
    <updated>2019-09-19T16:02:53.376Z</updated>
    
    <content type="html"><![CDATA[<p>相信写过代码的程序猿们都听说过Git的大名，哪怕是刚刚入门的小白，也在GitHub等代码托管网站<code>git clone</code>过他人的代码。为什么Git如此风靡，或者说我们为什么如此需要Git呢？本文将为你讲述Git的前世往生。</p><blockquote><p>注：本文只包含了Git的相关概念，不包含任何命令行代码。</p></blockquote><h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><p>首先来了解一下什么是“版本控制”：<strong>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</strong>一般情况下是针对程序的源代码文件进行版本控制，但实际上你可以对任何类型的文件进行版本控制。</p><h3 id="本地版本控制系统"><a href="#本地版本控制系统" class="headerlink" title="本地版本控制系统"></a>本地版本控制系统</h3><p>许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。这么做唯一的好处就是简单。不过坏处也不少：有时候会混淆所在的工作目录，一旦弄错文件丢了数据就没法撤销恢复。</p><p>为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异（见图一）。</p><div align="center"><img src="http://image.yingzq.com/img/20190919170521.png" width="40%" alt="本地版本控制系统"><p>图一：本地版本控制系统</p></div><p>其中最流行的一种叫做<a href="http://www.gnu.org/software/rcs/" target="_blank" rel="noopener">RCS</a>（Revision Control System），现今许多计算机系统上都还看得到它的踪影。甚至在流行的Mac OS X系统上安装了开发者工具包之后，也可以使用<code>rcs</code>命令。它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，便可以重新计算出各个版本的文件内容。</p><h3 id="集中化的版本控制系统"><a href="#集中化的版本控制系统" class="headerlink" title="集中化的版本控制系统"></a>集中化的版本控制系统</h3><p>接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作呢？于是，集中化的版本控制系统（Centralized Version Control Systems，简称CVCS）应运而生。</p><p>这类系统，诸如CVS、Subversion以及Perforce等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法（见图二）。</p><div align="center"><img src="http://image.yingzq.com/img/20190919215217.png" width="60%" alt="集中化的版本控制系统"><p>图二：集中化的版本控制系统</p></div><p>这种做法带来了许多好处，特别是相较于老式的本地VCS来说。现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个CVCS要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。</p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p>为了解决上述版本控制系统存在的问题，分布式版本控制系统（Distributed Version Control System，简称DVCS）诞生了。</p><p>在这类系统中，像Git、Mercurial、Bazaar以及Darcs等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><div align="center"><img src="http://image.yingzq.com/img/20190919231121.png" width="60%" alt="分布式版本控制系统"><p>图三：分布式版本控制系统</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信写过代码的程序猿们都听说过Git的大名，哪怕是刚刚入门的小白，也在GitHub等代码托管网站&lt;code&gt;git clone&lt;/code&gt;过他人的代码。为什么Git如此风靡，或者说我们为什么如此需要Git呢？本文将为你讲述Git的前世往生。&lt;/p&gt;
&lt;blockquote
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
