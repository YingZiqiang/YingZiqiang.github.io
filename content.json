{"meta":{"title":"一只NLP程序猿的点滴","subtitle":"生命太短暂，不要去做一些根本没有人想要的东西","description":"交流NLP, 深度学习技术, 分享coding路上的风景","author":"yingzq","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-09-18T14:56:17.871Z","updated":"2019-09-18T14:56:17.871Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-18T14:56:25.333Z","updated":"2019-09-18T14:56:25.333Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"为什么需要Git","slug":"why-we-need-git","date":"2019-09-18T14:19:30.000Z","updated":"2019-09-18T15:49:26.106Z","comments":true,"path":"2019/09/18/why-we-need-git/","link":"","permalink":"http://yoursite.com/2019/09/18/why-we-need-git/","excerpt":"","text":"相信写过代码的程序猿们都听说过Git的大名，哪怕是刚刚入门的小白，也在GitHub等代码托管网站git clone过他人的代码。为什么Git如此风靡，或者说我们为什么如此需要Git呢？本文将为你讲述Git的前世往生。 注：本文只包含了Git的相关概念，不包含任何命令行代码。 关于版本控制首先来了解一下什么是“版本控制”：版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 一般情况下是针对程序的源代码文件进行版本控制，但实际上你可以对任何类型的文件进行版本控制。 本地版本控制系统许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。这么做唯一的好处就是简单。不过坏处也不少：有时候会混淆所在的工作目录，一旦弄错文件丢了数据就没法撤销恢复。 为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]}]}